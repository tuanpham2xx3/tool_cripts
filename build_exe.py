#!/usr/bin/env python3
"""
Script ƒë·ªÉ build Macro Recorder Tool th√†nh executable
S·ª≠ d·ª•ng PyInstaller ƒë·ªÉ t·∫°o standalone .exe file
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def install_requirements():
    """C√†i ƒë·∫∑t c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt"""
    print("üì¶ C√†i ƒë·∫∑t dependencies...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ ƒê√£ c√†i ƒë·∫∑t dependencies")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªói c√†i ƒë·∫∑t: {e}")
        return False
    return True

def clean_build():
    """X√≥a c√°c file build c≈©"""
    print("üßπ D·ªçn d·∫πp build c≈©...")
    dirs_to_clean = ["build", "dist", "__pycache__"]
    for dir_name in dirs_to_clean:
        if os.path.exists(dir_name):
            shutil.rmtree(dir_name)
            print(f"   X√≥a {dir_name}/")
    
    # X√≥a .spec files c≈©
    for spec_file in Path(".").glob("*.spec"):
        spec_file.unlink()
        print(f"   X√≥a {spec_file}")

def create_icon():
    """T·∫°o icon cho app n·∫øu ch∆∞a c√≥"""
    icon_path = "app_icon.ico"
    if not os.path.exists(icon_path):
        print("üé® T·∫°o icon m·∫∑c ƒë·ªãnh...")
        # T·∫°o icon ƒë∆°n gi·∫£n b·∫±ng PIL n·∫øu c√≥
        try:
            from PIL import Image, ImageDraw, ImageFont
            
            # T·∫°o icon 256x256
            img = Image.new('RGBA', (256, 256))  # Create blank RGBA image
            img.paste((65, 105, 225, 255), [0, 0, 256, 256])  # Fill with RoyalBlue
            draw = ImageDraw.Draw(img)
            
            # V·∫Ω background gradient
            for i in range(256):
                color = (65 + i//8, 105 + i//8, 225, 255)
                draw.line([(0, i), (256, i)], fill=color)
            
            # V·∫Ω text "MR"
            try:
                font = ImageFont.truetype("arial.ttf", 120)
            except:
                font = ImageFont.load_default()
                
            bbox = draw.textbbox((0, 0), "MR", font=font)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]
            x = (256 - text_width) // 2
            y = (256 - text_height) // 2
            
            # Shadow
            draw.text((x + 3, y + 3), "MR", font=font, fill=(0, 0, 0, 128))
            # Main text
            draw.text((x, y), "MR", font=font, fill=(255, 255, 255, 255))
            
            # L∆∞u icon
            img.save(icon_path, format='ICO', sizes=[(256, 256), (128, 128), (64, 64), (32, 32), (16, 16)])
            print(f"‚úÖ ƒê√£ t·∫°o icon: {icon_path}")
            
        except ImportError:
            print("‚ö†Ô∏è Kh√¥ng c√≥ PIL, s·ª≠ d·ª•ng icon m·∫∑c ƒë·ªãnh")
            return None
            
    return icon_path

def build_exe():
    """Build executable v·ªõi PyInstaller"""
    print("üî® B·∫Øt ƒë·∫ßu build executable...")
    
    # T·∫°o icon
    icon_path = create_icon()
    
    # Build command
    cmd = [
        "pyinstaller",
        "--onefile",                    # T·∫°o single exe file
        "--windowed",                   # Kh√¥ng hi·ªán console window
        "--name=MacroRecorderTool",     # T√™n file exe
        "--clean",                      # Clean build
        "--noconfirm",                  # Kh√¥ng h·ªèi overwrite
    ]
    
    # Th√™m icon n·∫øu c√≥
    if icon_path and os.path.exists(icon_path):
        cmd.extend(["--icon", icon_path])
    
    # Hidden imports ƒë·ªÉ ƒë·∫£m b·∫£o t·∫•t c·∫£ modules ƒë∆∞·ª£c include
    hidden_imports = [
        "tkinter",
        "tkinter.ttk", 
        "tkinter.scrolledtext",
        "pynput",
        "pynput.mouse",
        "pynput.keyboard", 
        "pyautogui",
        "PIL",
        "PIL.Image",
        "PIL.ImageGrab"
    ]
    
    for module in hidden_imports:
        cmd.extend(["--hidden-import", module])
    
    # Add data files
    cmd.extend([
        "--add-data", "requirements.txt;.",
        "--add-data", "README.md;.",
    ])
    
    # Main script
    cmd.append("gui_app.py")
    
    print(f"Ch·∫°y l·ªánh: {' '.join(cmd)}")
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("‚úÖ Build th√†nh c√¥ng!")
        
        # Ki·ªÉm tra file ƒë√£ t·∫°o
        exe_path = os.path.join("dist", "MacroRecorderTool.exe")
        if os.path.exists(exe_path):
            size_mb = os.path.getsize(exe_path) / (1024 * 1024)
            print(f"üì¶ File exe: {exe_path}")
            print(f"üìä K√≠ch th∆∞·ªõc: {size_mb:.1f} MB")
            return exe_path
        else:
            print("‚ùå Kh√¥ng t√¨m th·∫•y file exe")
            return None
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªói build: {e}")
        if e.stdout:
            print("STDOUT:", e.stdout)
        if e.stderr:
            print("STDERR:", e.stderr)
        return None

def create_installer_script():
    """T·∫°o script Inno Setup ƒë·ªÉ build installer"""
    iss_content = '''
[Setup]
AppName=Macro Recorder Tool
AppVersion=1.0
AppVerName=Macro Recorder Tool v1.0
AppPublisher=Macro Recorder Development
DefaultDirName={autopf}\\MacroRecorderTool
DefaultGroupName=Macro Recorder Tool
UninstallDisplayIcon={app}\\MacroRecorderTool.exe
Compression=lzma2
SolidCompression=yes
OutputDir=installer
OutputBaseFilename=MacroRecorderTool_Setup
SetupIconFile=app_icon.ico
WizardImageFile=compiler:WizModernImage-IS.bmp
WizardSmallImageFile=compiler:WizModernSmallImage-IS.bmp

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
Name: "vietnamese"; MessagesFile: "compiler:Languages\\Vietnamese.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "dist\\MacroRecorderTool.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "README.md"; DestDir: "{app}"; Flags: ignoreversion
Source: "requirements.txt"; DestDir: "{app}"; Flags: ignoreversion

[Icons]
Name: "{group}\\Macro Recorder Tool"; Filename: "{app}\\MacroRecorderTool.exe"
Name: "{group}\\{cm:UninstallProgram,Macro Recorder Tool}"; Filename: "{uninstallexe}"
Name: "{autodesktop}\\Macro Recorder Tool"; Filename: "{app}\\MacroRecorderTool.exe"; Tasks: desktopicon

[Run]
Filename: "{app}\\MacroRecorderTool.exe"; Description: "{cm:LaunchProgram,Macro Recorder Tool}"; Flags: nowait postinstall skipifsilent

[Code]
function GetUninstallString(): String;
var
  sUnInstPath: String;
  sUnInstallString: String;
begin
  sUnInstPath := ExpandConstant('Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{#emit SetupSetting("AppId")}_is1');
  sUnInstallString := '';
  if not RegQueryStringValue(HKLM, sUnInstPath, 'UninstallString', sUnInstallString) then
    RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);
  Result := sUnInstallString;
end;

function IsUpgrade(): Boolean;
begin
  Result := (GetUninstallString() <> '');
end;

function UnInstallOldVersion(): Integer;
var
  sUnInstallString: String;
  iResultCode: Integer;
begin
  Result := 0;
  sUnInstallString := GetUninstallString();
  if sUnInstallString <> '' then begin
    sUnInstallString := RemoveQuotes(sUnInstallString);
    if Exec(sUnInstallString, '/SILENT /NORESTART /SUPPRESSMSGBOXES','', SW_HIDE, ewWaitUntilTerminated, iResultCode) then
      Result := 3
    else
      Result := 2;
  end else
    Result := 1;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if (CurStep=ssInstall) then
  begin
    if (IsUpgrade()) then
    begin
      UnInstallOldVersion();
    end;
  end;
end;
'''
    
    with open("MacroRecorderTool.iss", "w", encoding="utf-8") as f:
        f.write(iss_content)
    
    print("‚úÖ ƒê√£ t·∫°o script Inno Setup: MacroRecorderTool.iss")

def main():
    """Main function"""
    print("üéØ MACRO RECORDER TOOL - BUILD EXE")
    print("=" * 50)
    
    # Ki·ªÉm tra Python version
    if sys.version_info < (3, 7):
        print("‚ùå C·∫ßn Python 3.7 tr·ªü l√™n")
        return
    
    print(f"üêç Python version: {sys.version}")
    
    # B∆∞·ªõc 1: C√†i ƒë·∫∑t requirements
    if not install_requirements():
        return
    
    # B∆∞·ªõc 2: D·ªçn d·∫πp
    clean_build()
    
    # B∆∞·ªõc 3: Build exe
    exe_path = build_exe()
    if not exe_path:
        return
    
    # B∆∞·ªõc 4: T·∫°o installer script
    create_installer_script()
    
    print("\n" + "=" * 50)
    print("‚úÖ BUILD HO√ÄN TH√ÄNH!")
    print(f"üì¶ Executable: {exe_path}")
    print(f"üìä Size: {os.path.getsize(exe_path) / (1024*1024):.1f} MB")
    print("\nüìã H∆Ø·ªöNG D·∫™N TI·∫æP THEO:")
    print("1. Test exe: double-click v√†o dist/MacroRecorderTool.exe")
    print("2. T·∫°o installer: C√†i Inno Setup r·ªìi compile MacroRecorderTool.iss")
    print("3. Ho·∫∑c copy file exe ƒë·ªÉ distribute tr·ª±c ti·∫øp")
    print("\nüéâ Th√†nh c√¥ng!")

if __name__ == "__main__":
    main() 